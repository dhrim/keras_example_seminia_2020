{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "timeseries_anomaly_detection",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.0"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "n48qK4EjeHTY"
      },
      "source": [
        "![임도형 커멘트](https://github.com/dhrim/keras_example_seminia_2020/raw/master/comment.png)\n",
        "\n",
        "# 개요\n",
        "\n",
        "- 원 본 : https://keras.io/examples/timeseries/timeseries_anomaly_detection/\n",
        "\n",
        "- 작업 : Anomaly Detection\n",
        "- 데이터 : 타임 시리즈 데이터. Kaggle NAB(Numenta Anomaly Benchmark), https://www.kaggle.com/boltzmannbrain/nab\n",
        "- 적용 모델 : AutoEncoder\n",
        "\n",
        "\n",
        "<br>\n",
        "\n",
        "# 특이 사항\n",
        "\n",
        "Kaggle의 데이터. 몇가지 다른 데이터도 있다.\n",
        "\n",
        "Kaggle의 데이터를 원 기사의 github에 올려두고 다운로드 받고 있다.\n",
        "\n",
        "- 데이터 홈 : https://www.kaggle.com/boltzmannbrain/nab\n",
        "- 다운로드 url : https://raw.githubusercontent.com/numenta/nab/master/data/artificialNoAnomaly/art_daily_small_noise.csv\n",
        "\n",
        "\n",
        "<br>\n",
        "\n",
        "# 모델\n",
        "\n",
        "1개의 데이터 인스턴스는 (288,)의 모양.\n",
        "\n",
        "이를 처리하는 모델은 1D Conv를 사용한 Conv AutoEncoder\n",
        "\n",
        "\n",
        "<br>\n",
        "\n",
        "# AutoEncoder를 사용한 이상 탐지\n",
        "\n",
        "AutoEncoder는 입력과 출력을 같은 것으로 하고, 중간 좁은 곳을 대칭으로 한 네트웤이다.\n",
        "\n",
        "입력보다 작은 곳을 통과해서도 입력과 같은 출력을 내려면, 데이터의 핵심만 압축된 정보를 갖고 있게 된다. \n",
        "[참고자료](https://www.kaggle.com/robinteuwens/anomaly-detection-with-auto-encoders)\n",
        "\n",
        "비정상 혹은 노이즈에 해당하는 부분은 제거되는 효과가 있다.\n",
        "\n",
        "모델 학습 후에 비정상 데이터가 입력되면 비정상이 제거된 원본이 출력된다.\n",
        "\n",
        "입력과 출력의 차이를 구해서 비정상 여부를 탐지할 수 있다.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Q95N7EDBsQl5"
      },
      "source": [
        "# 태그\n",
        "\n",
        "```\n",
        "#anomaly_detection\n",
        "#time_series\n",
        "#auto_encoder\n",
        "#stide\n",
        "```\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SvN_oII1eCus"
      },
      "source": [
        "# Timeseries anomaly detection using an Autoencoder\n",
        "\n",
        "**Author:** [pavithrasv](https://github.com/pavithrasv)<br>\n",
        "**Date created:** 2020/05/31<br>\n",
        "**Last modified:** 2020/05/31<br>\n",
        "**Description:** Detect anomalies in a timeseries using an Autoencoder."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cmsW8wKmeCuv"
      },
      "source": [
        "## Introduction\n",
        "\n",
        "This script demonstrates how you can use a reconstruction convolutional\n",
        "autoencoder model to detect anomalies in timeseries data."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QTXG9cUGeCuw"
      },
      "source": [
        "## Setup"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "E_iR9ZLSeCuy"
      },
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from tensorflow import keras\n",
        "from tensorflow.keras import layers\n",
        "from matplotlib import pyplot as plt"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yF35wEDjeCu3"
      },
      "source": [
        "## Load the data\n",
        "\n",
        "We will use the [Numenta Anomaly Benchmark(NAB)](\n",
        "https://www.kaggle.com/boltzmannbrain/nab) dataset. It provides artifical\n",
        "timeseries data containing labeled anomalous periods of behavior. Data are\n",
        "ordered, timestamped, single-valued metrics.\n",
        "\n",
        "We will use the `art_daily_small_noise.csv` file for training and the\n",
        "`art_daily_jumpsup.csv` file for testing. The simplicity of this dataset\n",
        "allows us to demonstrate anomaly detection effectively."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bZCdW5RNeCu3"
      },
      "source": [
        "master_url_root = \"https://raw.githubusercontent.com/numenta/NAB/master/data/\"\n",
        "\n",
        "df_small_noise_url_suffix = \"artificialNoAnomaly/art_daily_small_noise.csv\"\n",
        "df_small_noise_url = master_url_root + df_small_noise_url_suffix\n",
        "df_small_noise = pd.read_csv(\n",
        "    df_small_noise_url, parse_dates=True, index_col=\"timestamp\"\n",
        ")\n",
        "\n",
        "df_daily_jumpsup_url_suffix = \"artificialWithAnomaly/art_daily_jumpsup.csv\"\n",
        "df_daily_jumpsup_url = master_url_root + df_daily_jumpsup_url_suffix\n",
        "df_daily_jumpsup = pd.read_csv(\n",
        "    df_daily_jumpsup_url, parse_dates=True, index_col=\"timestamp\"\n",
        ")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SOrLn3pBg_9G",
        "outputId": "7fb76d29-1215-4b8f-f15e-b89c1c6b1b50",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 104
        }
      },
      "source": [
        "!ls -al "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "total 16\n",
            "drwxr-xr-x 1 root root 4096 Sep 16 16:28 .\n",
            "drwxr-xr-x 1 root root 4096 Sep 26 03:30 ..\n",
            "drwxr-xr-x 1 root root 4096 Sep 18 16:15 .config\n",
            "drwxr-xr-x 1 root root 4096 Sep 16 16:29 sample_data\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BHe89047eCu7"
      },
      "source": [
        "## Quick look at the data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1GXxevDFeCu7",
        "outputId": "33535f86-355e-4493-cb5a-c3649a91263f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 260
        }
      },
      "source": [
        "print(df_small_noise.head())\n",
        "\n",
        "print(df_daily_jumpsup.head())"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "                         value\n",
            "timestamp                     \n",
            "2014-04-01 00:00:00  18.324919\n",
            "2014-04-01 00:05:00  21.970327\n",
            "2014-04-01 00:10:00  18.624806\n",
            "2014-04-01 00:15:00  21.953684\n",
            "2014-04-01 00:20:00  21.909120\n",
            "                         value\n",
            "timestamp                     \n",
            "2014-04-01 00:00:00  19.761252\n",
            "2014-04-01 00:05:00  20.500833\n",
            "2014-04-01 00:10:00  19.961641\n",
            "2014-04-01 00:15:00  21.490266\n",
            "2014-04-01 00:20:00  20.187739\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JNTZehJ4eCu_"
      },
      "source": [
        "## Visualize the data\n",
        "### Timeseries data without anomalies\n",
        "\n",
        "We will use the following data for training."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "05YbyaUKeCu_",
        "outputId": "ec71fad3-3ed5-49ca-f5a9-c459327d6263",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 303
        }
      },
      "source": [
        "fig, ax = plt.subplots()\n",
        "df_small_noise.plot(legend=False, ax=ax)\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1R06x5M_eCvC"
      },
      "source": [
        "### Timeseries data with anomalies\n",
        "\n",
        "We will use the following data for testing and see if the sudden jump up in the\n",
        "data is detected as an anomaly."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OmqR3bASeCvD",
        "outputId": "a2968bc1-5eea-41b9-ae0e-caa17e1619dd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 303
        }
      },
      "source": [
        "fig, ax = plt.subplots()\n",
        "df_daily_jumpsup.plot(legend=False, ax=ax)\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vKyUGkTPeCvH"
      },
      "source": [
        "## Prepare training data\n",
        "\n",
        "Get data values from the training timeseries data file and normalize the\n",
        "`value` data. We have a `value` for every 5 mins for 14 days.\n",
        "\n",
        "-   24 * 60 / 5 = **288 timesteps per day**\n",
        "-   288 * 14 = **4032 data points** in total"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IK40Yje5hy2_"
      },
      "source": [
        "![임도형 커멘트](https://github.com/dhrim/keras_example_seminia_2020/raw/master/comment.png)\n",
        "\n",
        "평균을 0으로 표준편차를 1이 되도록 standardization을 실행"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "f7rFmEvWeCvH",
        "outputId": "1fce1095-f808-42e6-9049-9acc08dda4ab",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "# Normalize and save the mean and std we get,\n",
        "# for normalizing test data.\n",
        "training_mean = df_small_noise.mean()\n",
        "training_std = df_small_noise.std()\n",
        "df_training_value = (df_small_noise - training_mean) / training_std\n",
        "print(\"Number of training samples:\", len(df_training_value))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Number of training samples: 4032\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Wn9BQRHViFNq",
        "outputId": "6eafb5ac-20bf-4a4f-e799-0cc9fe469d69",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 303
        }
      },
      "source": [
        "fig, ax = plt.subplots()\n",
        "df_training_value.plot(legend=False, ax=ax)\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "agHfLFWyeCvL"
      },
      "source": [
        "### Create sequences\n",
        "Create sequences combining `TIME_STEPS` contiguous data values from the\n",
        "training data."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "r5zIewypkeWk"
      },
      "source": [
        "![임도형 커멘트](https://github.com/dhrim/keras_example_seminia_2020/raw/master/comment.png)\n",
        "\n",
        "TIME_STPES 288 길이의 sequence 데이터를 만듬.\n",
        "\n",
        "4032개 포인트의 원본 데이터로 길이 288의 데이터 3744개 만듬\n",
        "```\n",
        "1 2 3 4 5 6 . . . 288 289 290\n",
        "<------------------>           : 생성된 첫 번 째 시컨스\n",
        "  <------------------->        : 생성된 두 번 째 시컨스\n",
        "    <--------------------->    : 생성된 세 번 째 시컨스\n",
        "```\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VaRIVCr8eCvM",
        "outputId": "168e1429-69d5-4767-bf9e-18f2e54cd69e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "TIME_STEPS = 288\n",
        "\n",
        "# Generated training sequences for use in the model.\n",
        "def create_sequences(values, time_steps=TIME_STEPS):\n",
        "    output = []\n",
        "    for i in range(len(values) - time_steps):\n",
        "        output.append(values[i : (i + time_steps)])\n",
        "    return np.stack(output)\n",
        "\n",
        "\n",
        "x_train = create_sequences(df_training_value.values)\n",
        "print(\"Training input shape: \", x_train.shape)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Training input shape:  (3744, 288, 1)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hr3uXd5teCvP"
      },
      "source": [
        "## Build a model\n",
        "\n",
        "We will build a convolutional reconstruction autoencoder model. The model will\n",
        "take input of shape `(batch_size, sequence_length, num_features)` and return\n",
        "output of the same shape. In this case, `sequence_length` is 288 and\n",
        "`num_features` is 1."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ebxJceaBnQ2d"
      },
      "source": [
        "![임도형 커멘트](https://github.com/dhrim/keras_example_seminia_2020/raw/master/comment.png)\n",
        "\n",
        "MaxPooling을 하지 않고 stride 2를 사용하여 사이즈를 줄인다.\n",
        "```\n",
        "288 -> 144 -> 72 -> 144 -> 288\n",
        "```\n",
        "\n",
        "Conv1DTranspose는 [UpSampling1D](https://keras.io/api/layers/reshaping_layers/up_sampling1d/) + Conv1D이다."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nUc_iOdmeCvQ",
        "outputId": "e001f88d-4890-40b2-c1c4-9432f544f185",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 399
        }
      },
      "source": [
        "model = keras.Sequential(\n",
        "    [\n",
        "        layers.Input(shape=(x_train.shape[1], x_train.shape[2])), # (288, 1)\n",
        "        layers.Conv1D(filters=32, kernel_size=7, padding=\"same\", strides=2, activation=\"relu\"),\n",
        "        layers.Dropout(rate=0.2),\n",
        "        layers.Conv1D(filters=16, kernel_size=7, padding=\"same\", strides=2, activation=\"relu\"),\n",
        "        layers.Conv1DTranspose(filters=16, kernel_size=7, padding=\"same\", strides=2, activation=\"relu\"),\n",
        "        layers.Dropout(rate=0.2),\n",
        "        layers.Conv1DTranspose(filters=32, kernel_size=7, padding=\"same\", strides=2, activation=\"relu\"),\n",
        "        layers.Conv1DTranspose(filters=1, kernel_size=7, padding=\"same\"),\n",
        "    ]\n",
        ")\n",
        "model.compile(optimizer=keras.optimizers.Adam(learning_rate=0.001), loss=\"mse\")\n",
        "model.summary()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "conv1d (Conv1D)              (None, 144, 32)           256       \n",
            "_________________________________________________________________\n",
            "dropout (Dropout)            (None, 144, 32)           0         \n",
            "_________________________________________________________________\n",
            "conv1d_1 (Conv1D)            (None, 72, 16)            3600      \n",
            "_________________________________________________________________\n",
            "conv1d_transpose (Conv1DTran (None, 144, 16)           1808      \n",
            "_________________________________________________________________\n",
            "dropout_1 (Dropout)          (None, 144, 16)           0         \n",
            "_________________________________________________________________\n",
            "conv1d_transpose_1 (Conv1DTr (None, 288, 32)           3616      \n",
            "_________________________________________________________________\n",
            "conv1d_transpose_2 (Conv1DTr (None, 288, 1)            225       \n",
            "=================================================================\n",
            "Total params: 9,505\n",
            "Trainable params: 9,505\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mEUBt7u8eCvS"
      },
      "source": [
        "## Train the model\n",
        "\n",
        "Please note that we are using `x_train` as both the input and the target\n",
        "since this is a reconstruction model."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OSVKSDM8eCvT",
        "outputId": "362a184c-9150-41f9-8ac7-90699c4a6462",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 572
        }
      },
      "source": [
        "history = model.fit(\n",
        "    x_train,\n",
        "    x_train,\n",
        "    epochs=50,\n",
        "    batch_size=128,\n",
        "    validation_split=0.1,\n",
        "    callbacks=[\n",
        "        keras.callbacks.EarlyStopping(monitor=\"val_loss\", patience=5, mode=\"min\")\n",
        "    ],\n",
        ")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/50\n",
            "27/27 [==============================] - 0s 15ms/step - loss: 0.5194 - val_loss: 0.0739\n",
            "Epoch 2/50\n",
            "27/27 [==============================] - 0s 5ms/step - loss: 0.0750 - val_loss: 0.0405\n",
            "Epoch 3/50\n",
            "27/27 [==============================] - 0s 5ms/step - loss: 0.0550 - val_loss: 0.0370\n",
            "Epoch 4/50\n",
            "27/27 [==============================] - 0s 5ms/step - loss: 0.0472 - val_loss: 0.0316\n",
            "Epoch 5/50\n",
            "27/27 [==============================] - 0s 5ms/step - loss: 0.0415 - val_loss: 0.0272\n",
            "Epoch 6/50\n",
            "27/27 [==============================] - 0s 5ms/step - loss: 0.0370 - val_loss: 0.0239\n",
            "Epoch 7/50\n",
            "27/27 [==============================] - 0s 5ms/step - loss: 0.0337 - val_loss: 0.0227\n",
            "Epoch 8/50\n",
            "27/27 [==============================] - 0s 6ms/step - loss: 0.0311 - val_loss: 0.0205\n",
            "Epoch 9/50\n",
            "27/27 [==============================] - 0s 6ms/step - loss: 0.0290 - val_loss: 0.0205\n",
            "Epoch 10/50\n",
            "27/27 [==============================] - 0s 5ms/step - loss: 0.0273 - val_loss: 0.0197\n",
            "Epoch 11/50\n",
            "27/27 [==============================] - 0s 5ms/step - loss: 0.0259 - val_loss: 0.0190\n",
            "Epoch 12/50\n",
            "27/27 [==============================] - 0s 5ms/step - loss: 0.0246 - val_loss: 0.0197\n",
            "Epoch 13/50\n",
            "27/27 [==============================] - 0s 5ms/step - loss: 0.0235 - val_loss: 0.0199\n",
            "Epoch 14/50\n",
            "27/27 [==============================] - 0s 5ms/step - loss: 0.0225 - val_loss: 0.0193\n",
            "Epoch 15/50\n",
            "27/27 [==============================] - 0s 6ms/step - loss: 0.0216 - val_loss: 0.0211\n",
            "Epoch 16/50\n",
            "27/27 [==============================] - 0s 6ms/step - loss: 0.0209 - val_loss: 0.0196\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qRXz-4AIeCvW"
      },
      "source": [
        "Let's plot training and validation loss to see how the training went."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-2nQBaNqeCvX",
        "outputId": "66dac38b-0e48-4a45-bcd3-c5d4cf7048b8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        }
      },
      "source": [
        "plt.plot(history.history[\"loss\"], label=\"Training Loss\")\n",
        "plt.plot(history.history[\"val_loss\"], label=\"Validation Loss\")\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXQAAAD4CAYAAAD8Zh1EAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nO3de3zcdZ3v8ddnZjKX5to2KU3Sum21gIXe06LgpV05Lgi2i4DSxbN0WVF5CFWOCui6wEFZceWsLmdR1/XCPpSlIK5sORS7wsLWFVebVm4FqqUUml4gKTSXNpe5fM8fv0kySSfNtJ1kMr95Px+PeczvNr/5hND3/PKd7/f7M+ccIiJS/AKFLkBERPJDgS4i4hMKdBERn1Cgi4j4hAJdRMQnQoV649raWjdr1qxCvb2ISFHaunVrm3OuLtu+ggX6rFmzaG5uLtTbi4gUJTN7ZaR9anIREfEJBbqIiE8o0EVEfKJgbegiMj7i8TgtLS309PQUuhQ5DtFolBkzZlBWVpbzaxToIj7X0tJCZWUls2bNwswKXY7kwDnHwYMHaWlpYfbs2Tm/Tk0uIj7X09PD1KlTFeZFxMyYOnXqcf9VpUAXKQEK8+JzIr+zogv05t1v8LWfv4im/RURGaroAv3plna+/cRLvHkkXuhSRCQHBw8eZNGiRSxatIjp06fT2Ng4sN7X13fM1zY3N7Nu3bpR3+Pss8/OS61PPPEEF154YV7OVQhF96VoY00UgH2HuplSHi5wNSIymqlTp/LUU08BcMstt1BRUcHnPve5gf2JRIJQKHsUNTU10dTUNOp7PPnkk/kptsgV3RV6Q00M8AJdRIrT2rVr+eQnP8lZZ53F9ddfz29/+1ve+c53snjxYs4++2x27NgBDL1ivuWWW7jyyitZsWIFc+bM4c477xw4X0VFxcDxK1as4JJLLuH000/n8ssvH2ie3bhxI6effjpLly5l3bp1x3Ulfu+99zJ//nzOPPNMbrjhBgCSySRr167lzDPPZP78+XzjG98A4M4772TevHksWLCAyy677OT/Yx2HortCr69WoIucqP/90Hae39eR13POa6ji5g+ecdyva2lp4cknnyQYDNLR0cEvf/lLQqEQjz76KF/84hf56U9/etRrXnzxRR5//HE6Ozs57bTTuPrqq4/qp/273/2O7du309DQwDnnnMOvfvUrmpqa+MQnPsHmzZuZPXs2a9asybnOffv2ccMNN7B161YmT57M+9//fh588EFmzpzJ3r17ee655wA4dOgQALfffjsvv/wykUhkYNt4Kbor9KnlYcKhAPvbNUhCpJhdeumlBINBANrb27n00ks588wzue6669i+fXvW11xwwQVEIhFqa2uZNm0ar7322lHHLF++nBkzZhAIBFi0aBG7d+/mxRdfZM6cOQN9uo8n0Lds2cKKFSuoq6sjFApx+eWXs3nzZubMmcOuXbu49tpr+fnPf05VVRUACxYs4PLLL+fHP/7xiE1JYyWndzOz84C/B4LA95xztw/bvxb4OrA3vekfnHPfy2OdAwIBo746yl5doYsctxO5kh4r5eXlA8t//dd/zcqVK/nZz37G7t27WbFiRdbXRCKRgeVgMEgikTihY/Jh8uTJPP3002zatInvfOc73H///fzgBz/g4YcfZvPmzTz00EPcdtttPPvss+MW7KNeoZtZELgLOB+YB6wxs3lZDr3PObco/RiTMO/XUB3TFbqIj7S3t9PY2AjA3Xffnffzn3baaezatYvdu3cDcN999+X82uXLl/Of//mftLW1kUwmuffee3nve99LW1sbqVSKiy++mK985Sts27aNVCrFnj17WLlyJV/72tdob2+nq6sr7z/PSHL52FgO7HTO7QIws/XAauD5sSzsWOprovz6pYOFensRybPrr7+eK664gq985StccMEFeT9/LBbjW9/6Fueddx7l5eUsW7ZsxGMfe+wxZsyYMbD+k5/8hNtvv52VK1finOOCCy5g9erVPP300/zFX/wFqVQKgK9+9askk0k++tGP0t7ejnOOdevWUVNTk/efZyQ22gAdM7sEOM8597H0+v8EznLOXZNxzFrgq0Ar8HvgOufcnizn+jjwcYC3vOUtS195ZcR52o/p//z7Du56fCe//8r5hIJF9zWAyLh64YUXePvb317oMgquq6uLiooKnHN86lOfYu7cuVx33XWFLuuYsv3uzGyrcy5rX858peFDwCzn3ALgF8A/ZzvIOfdd51yTc66pri7rHZRy0lATI+Xgtc7eEz6HiJSWf/qnf2LRokWcccYZtLe384lPfKLQJeVdLk0ue4GZGeszGPzyEwDnXGb7x/eAvz350kZWXz04uKgx3S9dRORYrrvuugl/RX6y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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KoQRrW7geCve"
      },
      "source": [
        "### Compare recontruction\n",
        "\n",
        "Just for fun, let's see how our model has recontructed the first sample.\n",
        "This is the 288 timesteps from day 1 of our training dataset."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ncPrYA1oeCva"
      },
      "source": [
        "## Detecting anomalies\n",
        "\n",
        "We will detect anomalies by determining how well our model can reconstruct\n",
        "the input data.\n",
        "\n",
        "\n",
        "1.   Find MAE loss on training samples.\n",
        "2.   Find max MAE loss value. This is the worst our model has performed trying\n",
        "to reconstruct a sample. We will make this the `threshold` for anomaly\n",
        "detection.\n",
        "3.   If the reconstruction loss for a sample is greater than this `threshold`\n",
        "value then we can infer that the model is seeing a pattern that it isn't\n",
        "familiar with. We will label this sample as an `anomaly`.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "a_BaKllSo7Rj"
      },
      "source": [
        "![임도형 커멘트](https://github.com/dhrim/keras_example_seminia_2020/raw/master/comment.png)\n",
        "\n",
        "원 본과 출력된 본과의 차이를 구한다.\n",
        "\n",
        "차이의 최대값을 이후 이상 탐지의 임계값으로 사용한다."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0cnf8wryeCva",
        "outputId": "d865b58b-5da2-45c9-e7f6-1b28e2dab8c4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        }
      },
      "source": [
        "# Get train MAE loss.\n",
        "x_train_pred = model.predict(x_train)\n",
        "train_mae_loss = np.mean(np.abs(x_train_pred - x_train), axis=1)\n",
        "\n",
        "plt.hist(train_mae_loss, bins=50)\n",
        "plt.xlabel(\"Train MAE loss\")\n",
        "plt.ylabel(\"No of samples\")\n",
        "plt.show()\n",
        "\n",
        "# Get reconstruction loss threshold.\n",
        "threshold = np.max(train_mae_loss)\n",
        "print(\"Reconstruction error threshold: \", threshold)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Reconstruction error threshold:  0.12604319162613292\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RS_-s4E9owI-"
      },
      "source": [
        "![임도형 커멘트](https://github.com/dhrim/keras_example_seminia_2020/raw/master/comment.png)\n",
        "\n",
        "원본 데이터와 출력되어 재생성된 데이터"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "W4kyStcQeCve",
        "outputId": "fb2440c4-687f-4e55-c64d-4b2502f5af37",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        }
      },
      "source": [
        "# Checking how the first sequence is learnt\n",
        "plt.plot(x_train[0])\n",
        "plt.plot(x_train_pred[0], color=\"y\")\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kz2WQhr6eCvi"
      },
      "source": [
        "### Prepare test data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "z3dUx7ULpkDo",
        "outputId": "173fb5a1-7a56-411f-857f-556a84055705",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 321
        }
      },
      "source": [
        "def normalize_test(values, mean, std):\n",
        "    values -= mean\n",
        "    values /= std\n",
        "    return values\n",
        "\n",
        "\n",
        "df_test_value = (df_daily_jumpsup - training_mean) / training_std\n",
        "fig, ax = plt.subplots()\n",
        "df_test_value.plot(legend=False, ax=ax)\n",
        "plt.show()\n",
        "\n",
        "# Create sequences from test values.\n",
        "x_test = create_sequences(df_test_value.values)\n",
        "print(\"Test input shape: \", x_test.shape)\n",
        "\n",
        "# Get test MAE loss.\n",
        "x_test_pred = model.predict(x_test)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Test input shape:  (3744, 288, 1)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_sJxmMdCql-g"
      },
      "source": [
        "### diff 구하기"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4ay1TvsKp6_x",
        "outputId": "69374b89-eae2-409d-e0a5-b3864fd7bbb6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        }
      },
      "source": [
        "test_mae_loss = np.mean(np.abs(x_test_pred - x_test), axis=1)\n",
        "print(test_mae_loss.shape)\n",
        "\n",
        "test_mae_loss = test_mae_loss.reshape((-1)) # flatten과 동일하다.\n",
        "print(test_mae_loss.shape)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(3744, 1)\n",
            "(3744,)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ic6aElOkrhlE"
      },
      "source": [
        "### 각 샘플들의 평균 diff 분포"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Xew12VlWeCvi",
        "outputId": "dc8bea7c-9e18-4401-e854-5e6e998d2591",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        }
      },
      "source": [
        "plt.hist(test_mae_loss, bins=50)\n",
        "plt.xlabel(\"test MAE loss\")\n",
        "plt.ylabel(\"No of samples\")\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6B-DrCYhtIyV"
      },
      "source": [
        "![임도형 커멘트](https://github.com/dhrim/keras_example_seminia_2020/raw/master/comment.png)\n",
        "\n",
        "전체 3744 중에 438개의 diff가 임계값보다 컸다.\n",
        "\n",
        "임계값 보다 큰 여부가 anomalies에 담긴다."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uumK6ThaqiQX",
        "outputId": "8e3a3852-64b7-45f3-d729-409fe01975e3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 713
        }
      },
      "source": [
        "# Detect all the samples which are anomalies.\n",
        "anomalies = test_mae_loss > threshold\n",
        "print(\"Number of anomaly samples: \", np.sum(anomalies))\n",
        "print(\"Indices of anomaly samples: \", np.where(anomalies))\n",
        "print(anomalies[:10])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Number of anomaly samples:  406\n",
            "Indices of anomaly samples:  (array([1654, 1655, 1657, 1658, 1659, 1660, 2518, 2519, 2522, 2523, 2697,\n",
            "       2701, 2702, 2703, 2704, 2705, 2706, 2707, 2708, 2709, 2710, 2711,\n",
            "       2712, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2720, 2721, 2722,\n",
            "       2723, 2724, 2725, 2726, 2727, 2728, 2729, 2730, 2731, 2732, 2733,\n",
            "       2734, 2735, 2736, 2737, 2738, 2739, 2740, 2741, 2742, 2743, 2744,\n",
            "       2745, 2746, 2747, 2748, 2749, 2750, 2751, 2752, 2753, 2754, 2755,\n",
            "       2756, 2757, 2758, 2759, 2760, 2761, 2762, 2763, 2764, 2765, 2766,\n",
            "       2767, 2768, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2776, 2777,\n",
            "       2778, 2779, 2780, 2781, 2782, 2783, 2784, 2785, 2786, 2787, 2788,\n",
            "       2789, 2790, 2791, 2792, 2793, 2794, 2795, 2796, 2797, 2798, 2799,\n",
            "       2800, 2801, 2802, 2803, 2804, 2805, 2806, 2807, 2808, 2809, 2810,\n",
            "       2811, 2812, 2813, 2814, 2815, 2816, 2817, 2818, 2819, 2820, 2821,\n",
            "       2822, 2823, 2824, 2825, 2826, 2827, 2828, 2829, 2830, 2831, 2832,\n",
            "       2833, 2834, 2835, 2836, 2837, 2838, 2839, 2840, 2841, 2842, 2843,\n",
            "       2844, 2845, 2846, 2847, 2848, 2849, 2850, 2851, 2852, 2853, 2854,\n",
            "       2855, 2856, 2857, 2858, 2859, 2860, 2861, 2862, 2863, 2864, 2865,\n",
            "       2866, 2867, 2868, 2869, 2870, 2871, 2872, 2873, 2874, 2875, 2876,\n",
            "       2877, 2878, 2879, 2880, 2881, 2882, 2883, 2884, 2885, 2886, 2887,\n",
            "       2888, 2889, 2890, 2891, 2892, 2893, 2894, 2895, 2896, 2897, 2898,\n",
            "       2899, 2900, 2901, 2902, 2903, 2904, 2905, 2906, 2907, 2908, 2909,\n",
            "       2910, 2911, 2912, 2913, 2914, 2915, 2916, 2917, 2918, 2919, 2920,\n",
            "       2921, 2922, 2923, 2924, 2925, 2926, 2927, 2928, 2929, 2930, 2931,\n",
            "       2932, 2933, 2934, 2935, 2936, 2937, 2938, 2939, 2940, 2941, 2942,\n",
            "       2943, 2944, 2945, 2946, 2947, 2948, 2949, 2950, 2951, 2952, 2953,\n",
            "       2954, 2955, 2956, 2957, 2958, 2959, 2960, 2961, 2962, 2963, 2964,\n",
            "       2965, 2966, 2967, 2968, 2969, 2970, 2971, 2972, 2973, 2974, 2975,\n",
            "       2976, 2977, 2978, 2979, 2980, 2981, 2982, 2983, 2984, 2985, 2986,\n",
            "       2987, 2988, 2989, 2990, 2991, 2992, 2993, 2994, 2995, 2996, 2997,\n",
            "       2998, 2999, 3000, 3001, 3002, 3003, 3004, 3005, 3006, 3007, 3008,\n",
            "       3009, 3010, 3011, 3012, 3013, 3014, 3015, 3016, 3017, 3018, 3019,\n",
            "       3020, 3021, 3022, 3023, 3024, 3025, 3026, 3027, 3028, 3029, 3030,\n",
            "       3031, 3032, 3033, 3034, 3035, 3036, 3037, 3038, 3039, 3040, 3041,\n",
            "       3042, 3043, 3044, 3045, 3046, 3047, 3048, 3049, 3050, 3051, 3052,\n",
            "       3053, 3054, 3055, 3056, 3057, 3058, 3059, 3060, 3061, 3062, 3063,\n",
            "       3064, 3065, 3066, 3067, 3068, 3069, 3070, 3071, 3072, 3073, 3074,\n",
            "       3075, 3076, 3077, 3078, 3079, 3080, 3081, 3082, 3083, 3084, 3085,\n",
            "       3086, 3087, 3088, 3089, 3090, 3091, 3092, 3093, 3094, 3095]),)\n",
            "[False False False False False False False False False False]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qHLeMxwXeCvl"
      },
      "source": [
        "## Plot anomalies\n",
        "\n",
        "We now know the samples of the data which are anomalies. With this, we will\n",
        "find the corresponding `timestamps` from the original test data. We will be\n",
        "using the following method to do that:\n",
        "\n",
        "Let's say time_steps = 3 and we have 10 training values. Our `x_train` will\n",
        "look like this:\n",
        "\n",
        "- 0, 1, 2\n",
        "- 1, 2, 3\n",
        "- 2, 3, 4\n",
        "- 3, 4, 5\n",
        "- 4, 5, 6\n",
        "- 5, 6, 7\n",
        "- 6, 7, 8\n",
        "- 7, 8, 9\n",
        "\n",
        "All except the initial and the final time_steps-1 data values, will appear in\n",
        "`time_steps` number of samples. So, if we know that the samples\n",
        "[(3, 4, 5), (4, 5, 6), (5, 6, 7)] are anomalies, we can say that the data point\n",
        "5 is an anomaly."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "akJ_nx46u9k5"
      },
      "source": [
        "![임도형 커멘트](https://github.com/dhrim/keras_example_seminia_2020/raw/master/comment.png)\n",
        "\n",
        "특정 포인트를 포함한 sequence 전체가 anomal인 인덱스를 찾는다.\n",
        "\n",
        "anomalous_data_indices에 담긴다.\n",
        "\n",
        "```\n",
        "      x x x          \n",
        "x x x       x x\n",
        "<--->               : 0개\n",
        "  <--->             : 1개만\n",
        "    <--->           : 2개만\n",
        "       <--->        : 3개 전부다 anomal이다. 찾아짐\n",
        "          <--->     : 2개만.\n",
        "\n",
        "```"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_FSjP-PVeCvl"
      },
      "source": [
        "# data i is an anomaly if samples [(i - timesteps + 1) to (i)] are anomalies\n",
        "anomalous_data_indices = []\n",
        "for data_idx in range(TIME_STEPS - 1, len(df_test_value) - TIME_STEPS + 1):\n",
        "    if np.all(anomalies[data_idx - TIME_STEPS + 1 : data_idx]):\n",
        "        anomalous_data_indices.append(data_idx)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BUsfissLeCvp"
      },
      "source": [
        "Let's overlay the anomalies on the original test data plot."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9WAF3sfceCvp",
        "outputId": "0115147b-e8cc-4db0-a53e-4fa089621a2b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 303
        }
      },
      "source": [
        "df_subset = df_daily_jumpsup.iloc[anomalous_data_indices]\n",
        "fig, ax = plt.subplots()\n",
        "df_daily_jumpsup.plot(legend=False, ax=ax)\n",
        "df_subset.plot(legend=False, ax=ax, color=\"r\")\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9UjW-L0-r2mn"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}